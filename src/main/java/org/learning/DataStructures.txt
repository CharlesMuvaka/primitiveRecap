                            Data Structures.
- They represent a way to store and organise data.
- There are two types.
        1. Linear Data structures - Data is organised sequentially.
        2. Non-linear data structures

        Non-Linear data structures
- Data is not organised sequentially.
- Nodes and edges are used to represent the data and the relationship between the data respectively.
- There are two types
            1. Trees
            2. Graphs

            Graphs
- A collection of nodes and edges.
- There are many types of graphs.
        1. Directed graphs - Contains arrows showing direction from one node to the other
        2. Undirected graphs - No direction between nodes
        3. Connected and disconnected graphs - There is a relationship between one node and another in a connected graph
                                while there isn't in a disconnected graph.

          Real World Application of Graphs.
- Targeted advertisements
- Calculating distance between points.

          Nodes/Vertex
- A node is denoted by a circle and stores data.
- usually denoted by (n).
- For every node there can be a maximum of two(2) edges.

- An adjacency matrix and an adjacency list are used to represent data in a graph.

            Adjacency Matrix
- Uses a multidimensional array to represent the data.

            Traversing through a Graph.
- There are two ways in traversing through a graph.
        1. Using a breadth First Traversal
        2. using a Depth first traversal.

        Depth First Traversal(DFT)
- You go deep following the same direction from a given node until no more nodes can be reached.
- It uses a stack to store nodes while traversing.
    NOTE: A stack uses a LIFO architecture. The last object to be inserted is the one that is removed first

               O -> start node
              / \
             O   O
            / \ / \
           O   O   O

           Steps
- Add the start node to the stack
- Loop through the graph matrix or adjacency list.
- Ensure that the stack is always not empty using a while loop.
        NOTE: Currently the stack won't be empty since you already added the start node in the stack.
- Pop a node out of the stack and make it your current node.
- Loop through the matrix/list again and push the neighbors of the current node.
    Example:
        public void depthFirstTraversal(matrix, startNode){

           //initialise a stack to store the nodes being traversed.
           Stack<Integer> stack = new Stack<>()

           //adding the start node
           stack.add(startNode)

           for(int i = 0; i < matrix.length; i++){
                //check whether the start node exists in the matrix
                if(i == startNode){
                    //creating a breakpoint to end the traversal

                    while(stack.size != 0){
                        //getting the node to be traversed from the stack

                        int currentNode = stack.pop()
                        //printing the current node to the terminal

                        System.out.println(currentNode)

                        //looping through the current node neighbors
                        for(int j = 0; j < matrix[currentNode].length; j++){
                            //getting the neighbors of the current node
                            if(matrix[currentNode][j] == 1){
                                //pushing the neighbor to the stack.
                                stack.push(j)
                            }
                        }
                    }
                }else{
                    System.out.println("The node doesn't exist in the graph")
                }
           }
        }